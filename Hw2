{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "\n",
    "In this homework, you'll be required to load in a dataset which has about 500 features. By using\n",
    "Lasso ($L^1$) regression, we'll find the optimal constraint on the $L^1$ norm which gives us the best\n",
    "$R^2$. Then we'll plot the results.\n",
    "\n",
    "Recall we minimize the following on ** training data: $(x_i,y_i)$**\n",
    "\n",
    "$$\\min_{\\beta} \\frac{1}{N} \\sum_{i=1}^N (y_i - \\beta \\cdot x_i)^2 + \\lambda \\|\\beta \\|_{L^1}.$$\n",
    "\n",
    "\n",
    "Denoting $\\beta_{\\lambda}$ as the minimum of the above, we then choose $\\lambda$ to maximize $R^2$ on **testing data: $(x_j,y_j)$**\n",
    "\n",
    "$$ \\max_{\\lambda} 1 - \\frac{\\sum_{j} (y_j - \\beta_{\\lambda} \\cdot x_j)^2}{\\sum_j (y_j - \\bar y)^2}$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lasso Regularization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a) Load in hw2data.csv from ../data into a pandas dataframe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "b) Set y to be the y variable in the dataframe from a and X to be the remaining features."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "c) As shown in the Booking.com example, using Lasso regression, find the regularization strength\n",
    "which optimizes the $R^2$. \n",
    "\n",
    "**Hint:** Take a range of alpha from `np.logspace(-8,-3,1000)`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "d) Plot the training perforamnce versus the testing performance, and observe whree the test performance is\n",
    "maximized. I've written an outline of the code you need."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nanbinx/anaconda/lib/python3.5/site-packages/sklearn/linear_model/coordinate_descent.py:466: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations\n",
      "  ConvergenceWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nRCRJUmP+P5r0yHPGP34tAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11c910f28>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn\n",
    "from sklearn.linear_model import *\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import statsmodels.formula.api as sm\n",
    "import numpy.random as nprnd\n",
    "import random\n",
    "import json\n",
    "%matplotlib inline\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "Data = pd.read_csv('../data/hw2data.csv' )\n",
    "#Set y to be the y variable in the dataframe from a and X to be the remaining features\n",
    "y = Data.y\n",
    "X = Data.drop('y',axis=1)\n",
    "\n",
    "# Normalize the feature\n",
    "scaler = StandardScaler()\n",
    "X = X.as_matrix().astype(np.float)\n",
    "X = scaler.fit_transform(X)\n",
    "\n",
    "size = len(X)\n",
    "\n",
    "#split the data into training set and test set\n",
    "X_train = X[0:int(size*0.8)]\n",
    "X_test = X[int(size*0.8):]\n",
    "\n",
    "y_train = y[0:int(size*0.8)]\n",
    "y_test = y[int(size*0.8):]\n",
    "\n",
    "#X_train = preprocessing.scale(X_train)\n",
    "#y_train = preprocessing.scale(y_train)\n",
    "#X_test = preprocessing.scale(X_test)\n",
    "#y_test = preprocessing.scale(y_test)\n",
    "alpha_optim=0\n",
    "\n",
    "scores = []\n",
    "alphas = np.logspace(-8,3,1000)\n",
    "for alpha in alphas:\n",
    "    regr = Lasso(alpha=alpha)\n",
    "\n",
    "    # Train the model using the training sets\n",
    "    regr.fit(X_train, y_train)\n",
    "    scores.append(regr.score(X_test,y_test))\n",
    "plt.plot(alphas,scores)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The opt alpha is 0.000794145171903\n"
     ]
    }
   ],
   "source": [
    "alpha_max_index = np.argmax(scores)\n",
    "# regularization score that optimizes R^2\n",
    "\n",
    "print('The opt alpha is',alphas[alpha_max_index])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nanbinx/anaconda/lib/python3.5/site-packages/sklearn/linear_model/coordinate_descent.py:466: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations\n",
      "  ConvergenceWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiYAAAGBCAYAAABSP3qNAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzt3Xl8FPX9x/HXbhZCEogEEcKleH688ayi4lFrvapYK/U+\nwFq1Kire9SraqrVi1XofqNQTtVa0P49ivfFABbzw44kCCohyE8Ak+/tjNjEJCexudrOT3ffzoQ+y\ns7Mzn/2wsG++852ZSDweR0RERCQMorkuQERERKSOgomIiIiEhoKJiIiIhIaCiYiIiISGgomIiIiE\nhoKJiIiIhIaCiYiIiISGgomIiIiEhoKJiIiIhIaCiYiIiISGgomIiIiEhoKJiIiIhIaCiYiIiISG\ngomIiIiEhoKJiIiIhEYs1wXkUjwej//wwxJqa+O5LqVdiEYjdOtWhnqWGvUtdepZetS31Kln6YlG\nI6y5ZudIVradjY22F5FIhGg0K33NS9FoRD1Lg/qWOvUsPepb6tSz9GSzXwUdTERERCRcFExEREQk\nNBRMREREJDQUTERERCQ0FExEREQkNBRMREREJDQUTERERCQ0FExEREQkNBRMREREJDQUTERERCQ0\nFExEREQkNBRMREREJDQUTERERCQ0FExEREQkNBRMREREJDQUTERERCQ0FExEREQkNBRMREREJDQU\nTERERCQ0FExEREQkNBRMREREJDQUTERERCQ0FExEREQkNBRMREREJDQUTERERCQ0FExEREQkNBRM\nREREJDQUTERERCQ0FExEREQkNBRMREREJDQUTERERCQ0FExEREQkNBRMREREJDQUTERERCQ0FExE\nREQkNBRMREREJDQUTERERCQ0FExEREQkNBRMREREJDQUTERERCQ0FExEREQkNBRMREREJDQUTERE\nRCQ0FExEREQkNBRMREREJDRiuS4AwMwGAecA2wK9gIPcfdxqXrM7MArYDPga+Iu735vlUkVERCSL\nwjJiUgZMBv4AxFe3spn1B54CngcGANcDd5rZXlmsUURERLIsFCMm7v4M8AyAmUWSeMnJwBfufm7d\nJsxsF+BM4L/ZqVJERESyLRTBJA07AuObLHsW+HsqG/l27hIWLFhKTU1txgpbSSSZnNWKzWd16433\nURSLsiIeYcGCKmqqM9izNngTkSzvZFW/zUVFUaqJsmDBsux+1lopkuXPaipisSi10SgLFi2nOoXP\n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\n2xl4EXjf3bfJapEiIiKSVaGY/GpmhwKjgEsJrpcyBXjWzLqv5nVrAPcSXPhNRERE2rlQBBOCi7Xd\n5u5j3P1j4CRgKTBsNa+7leBOx29kuT4RERFpAzkPJmbWAdgWeL5umbvHCUZBBq7idUOBdYGR2a5R\nRERE2kYY5ph0J7hI2+wmy2cD1twLzGxD4ApgF3evNWt2taQUFeU8m7Ubdb1Sz1KjvqVOPUtPvvYt\nFos0uywWa/37zNeeZVs2+xWGYJISM4sSHL651N0/Tyxe+VObpPLyktWvJI2oZ+lR31KnnqUn3/pW\nXb10pWVdu5ZRUVGWsX3kW8/aszAEk7lADdCzyfKewKxm1u8CbAdsZWY3JZZFgYiZrQB+6e4vJrvz\nhQurqKmpTbnoQlRUFKW8vEQ9S5H6ljr1LD352rf585c0uywWK231tvO1Z9lW17dsyHkwcfcfzewd\nYE9gHICZRRKPb2jmJQuBzZssOwXYA/gNMC2V/dfU1FJdrQ9jKtSz9KhvqVPP0pNvfauubnqbtmBZ\nJt9jvvWsPct5MEm4FrgnEVDeIjhLpxS4B8DMrgR6u/uxiYmxHzV8sZnNAZa5+9Q2rVpEREQyKhTB\nxN3HJq5ZchnBIZzJwN7u/l1ilUqgX67qExERkbYRimAC4O43Aze38NzQ1bx2JDptWEREpN3T+VEi\nIiISGgomIiIiEhoKJiIiIhIaCiYiIiISGgomIiIiEhoKJiIiIhIaCiYiIiISGgomIiIiEhoKJiIi\nIhIaCiYiIiISGgomIiIiEhoKJiIiIhIaCiYiIiISGgomIiIiEhoKJiIiIhIaCiYiIiISGgomIiIi\nEhoKJiIiIhIaCiYiIiISGgomIiIiEhoKJiIiIhIaCiYiIiISGgomIiIiEhoKJiIiIhIaCiYiIiIS\nGgomIiIiEhoKJiIiIhIaCiYiIiISGgomIiIiEhoKJiIiIhIaCiaSlMGD9+bf/34s12WIiEiei+W6\nAMmMQYO2JxKJEI/HV3ouEokwdOgJDB16QtrbHzPmYbp06dyaEkVERFZLwSRPjBv3bP3P48c/x113\n3caDD/4LCIJKSUlps6+rqamhqKhotdtfY42uxGIaYBMRkexSMEnS0mXVfPvDkjbdZ69uZZR2Su63\nqKKiW/3PnTt3JhKJUFFR0WidN998nbPPHs611/6Dm2++gWnTvuSmm+6gc+fO3Hjj9Uyd+iHLly9n\n3XXX46STTmXrrbetf+3gwXtzwgknMXToMaxYsYLddhvIH/94KS+88DzvvjuRHj16Mnz4Wey4406Z\nefMiIlKQFEySsHRZNefeMoGly6vbdL+lxTGuPnmnpMNJsm677WaGDz+LHj160rVrV6ZPn86uu+7O\nKaecTlFREU8++W/OO28EDz30L7p1W7PF7YwefQennno6p59+Fg8++E9GjryIxx57itLS5kdnRERE\nVkdj8wUmEolw4omnsPXW29KnT1/Kyjqz8cab8KtfDWaddfrTt28/Tj75NLp168aECa+uclsHHvhr\ndtvt5/Tp05ff//4UFi9exCeffNxG70RERPKRRkySUNopGLkI86GcVJht0ujxkiWLufPO23jrrdf5\n/vvvqampYcWK5cyePWuV21l//Q3qfy4vL6dDhw7Mm/dDxusVEZHCoWCSpNJOMdbvvUauy8iIkpKS\nRo+vu+4aPvroA04+eTi9e/ehuLiY8847k+rqVR+6isWafnwi1NaufFaQiIhIshRMhPfff4/Bgw9m\nl112BWDRokXMnj07x1WJiEghUjAR+vXrxwsvjOdnP9uRmppq7rjjFoqKNP1IRETaXmiCiZmdApwN\nVAJTgNPcfWIL6/4aOBnYCigGPgT+5O7PtVG5eeWMM87hqqsu56SThtK1azeOPXYoixYtarJWpPGj\nSISmmlkkIiKSkkhzVwpta2Z2KHAv8HvgLeBMYAiwkbvPbWb9vwMzgReA+cAwglDzM3efksKu4/Pm\nLaG6uraV76AwxGJRKirKUM9So76lTj1LT772be7cuWy66XqNln300Rd079691dvO155lW6JvWfnn\naFhGTM4EbnP3MQBmdhKwP0HguLrpyu5+ZpNFF5rZYOAAgtEWERERaYdyPpHAzDoA2wLP1y1z9zgw\nHhiY5DYiQBdA56qKiIi0YzkPJkB3oAhoehrIbIL5Jsk4BygDxmawLhEREWljYTmUkzYzOwK4GDiw\nufkoq6OzT5JX1yv1LDXqW+rUs/Tka99isZWnMsRikYzcWDRfe5Zt2exXGILJXKAG6NlkeU9glZce\nNbPDgNuBQ9z9hXR2Xl5esvqVpBH1LD3qW+rUs/TkW9+qq5eutKxr1zIqKsoyto9861l7lvNg4u4/\nmtk7wJ7AOKifM7IncENLrzOzw4E7gUPd/Zl0979wYRU1NZqJnYyioijl5SXqWYrUt9SpZ+nJ177N\nn7/y7UDmz19CLNb6G4bma8+yra5v2ZDzYJJwLXBPIqDUnS5cCtwDYGZXAr3d/djE4yMSzw0HJppZ\n3WhLlbu0FFceAAAcLUlEQVQvTGXHNTW1OkUsRepZetS31Kln6cm3vlVXr3xZi+rqeEbfY771rD0L\nxUE1dx9LcB2Sy4BJwJbA3u7+XWKVSqBfg5ecQDBh9ibgmwb/X9dWNYuIiEjmhWXEBHe/Gbi5heeG\nNnm8R5sUJSIiIm0qFCMmIiIiIhCiERNpnUGDticSidDcLQYikQhDh57A0KEntGofF198AcXFHbjo\nostatR0REZGWKJjkiXHjnq3/efz457jrrtt48MF/AUFQKSlp/ex1ERGRbFMwSVJVdRWzlny3+hUz\nqLJsLUpiyZ2OVVHRrf7nzp07E4lEqKioWGm9Tz/9hFtuuYH3359CaWkZO+64E6eeeiZdunQB4L//\nfYYxY0Yzc+ZMSktL2GijTbj66r9z5523Mn78c0QiEf7zn/8QiUS49dbRbLrp5pl5syIiIiiYJKWq\nuoqLJ1xFVXVVm+63JFbC5Tudn3Q4WZ0FC+Zz+ukn89vfHs6IEeexdOkSbrzxOi6//GKuvvo6Zs2a\nxZ//fClnnnkuAwfuzJIli5k06V0Ajj32eKZP/4qOHWOMGHE+1dU1lJevkZG6RERE6iiYFJCxYx9k\nwICtOe6439UvO/fcCzn88IOZM2c2c+fOAWC33faoH4FZb70NAIjFYnTs2JHi4g5UVFTofH8REckK\nBZMk1I1chPlQTjI+++wT3nrrDfbaa9dGyyORCDNnzmCLLQawxRYDOPzw37DDDjuy/fY7sscee1JW\n1jljNYiIiKyKgkmSSmIlrLvG2rkuo1WqqqrYY49f8LvfnbTS2Tvdu69FLBbjxhtv5733JjNx4puM\nHfsAd9xxC3fd9U+6d18rR1WLiEgh0XVMCshGG23MF198Tu/efejTp2+j/4uLi+vX23LLrTj++BMZ\nPfp+amtrefXVlwDo0KEDNTU1uSpfREQKgIJJARky5DC++242l112MR9/PJWZM2fw+uuvceWVwXVJ\npkyZzP3334v7x8yaNYsXXhjP4sWL6N9/PQB69erF1KlTmT79axYsmK+QIiIiGadDOQWkZ89Kbrnl\nLm655UbOPPMUqqt/pLKyFwMH7gJAly6deeediTz00P1UVS2lsrI3Z511HltttQ0ABx88hKlTP+TY\nY49g2bJlOl1YREQyLtLclUILSHzevCU6wyRJsViUiooy1LPUqG+pU8/Sk699mzt3Lptuul6jZR99\n9AXdu3dv9bbztWfZluhbJBvb1qEcERERCQ0FExEREQkNBRMREREJDQUTERERCQ0FExEREQkNBRMR\nEREJDQUTERERCQ0FExEREQkNBRMREREJDQUTScmNN97IMccckesyREQkTymY5Jk5c2ZzxRUjOeig\nfdljj4EccsgBXH/9KBYuXJDytgYN2r7+zsJ1jj/+eG688dZMldtuDRlyII888lBGt3naaSfyj39c\nm9Ftioi0N7qJX5JqamqYN29em+6zoqKCoqKipNf/5puZnHTSMNZeex1GjrySXr168eWXX3DTTdfx\nxhuvcfvt99KlS5dW1VRSUkJ5ea3uKSEiIlmhm/glceOmceMe5/zzz2bu3O/aqKxA9+5rcdVV13Dg\ngb9Oav2zzhrOtGlf8NBDj9OhQ4f65T/88D2HHnoQ++zzK8466zwg+Bf//vsfyLRpX/Laay/TuXMX\njj56KAcfPKT++dmzZ1H3+ais7M3jjz/JffeN5rnn/svo0fcDcMUVI1m0aBGbbroZjzzyECtWrOCw\nw47k6KOHctttN/LUU+Po1KkTv/vdSey33wEATJr0DsOHn8Qzz7xAWVlnAD799BOGDTuSRx55ksrK\nSp5++imuv34Ul1xyOTfe+HfmzJnNwIG7cNFFf+J//xvP6NG3s3jxYvbeez9OP/0sIpGW7yX1+OOP\n8tBD9zFnzmx69+7DMccMY++996t/ftCg7TnvvAuZMOE13nrrdbp378Gpp57BLrvs2uz2TjvtRCZP\nfpdIJEI8HicSifDyy28BMGXKZG6//SY+/vgjunatYNCg3Tn11NPo1as78+YtYezYhxk79kHmzJlN\n586dGTBgay6//CquuGIkTz/9VKNtjh07jsrKyqR+7/ONbqyWnnztm27iFz66iV+OjRgxvM1DCcDc\nud8xYsTwpNZduHAhEye+wcEHD2kUSgC6dVuTvfbah//977lGyx966D422si4++4HOOqoY7n++mt4\n++3gC/aOO8YQj8e58MI/MW7cs9x5570AiQDQ+LP47rsT+f77udx00x0MHz6Cu+66jXPPPZMuXdbg\njjvuZfDgg/nb365o1MPmgkTTZcuXL+PRRx/mssuuYtSoG5k06W0uuOAc3nhjAtdccwOXXHIZ48b9\nixdeeL7Fvrz00gvccMMoDj/8aP75z7EceOCvueKKkUya9E6j9e6++0723POX3HvvQwwcuDOXXXYx\nixYtanabf/nL31hrrR787ncnMW7cszzxxDMAzJw5g7PPHs4ee+zJmDEPM3Lklbz//hRGjboagKlT\nP+L666/hhBNO5sEHH2PUqH+w1VZbA3D66Wex+eZbcMABBzFu3HM88cQz9OzZs8X3JSKSrxRM8sSM\nGV8Tj8dZZ53+zT7fv/+6LFq0iPnz59cv22KLARxxxDH07duP3/zmUHbffU/Gjn0AgK5duwLQuXNn\nKiq6scYaXVvcd3l5V8444xz69Vub/fY7gLXXXofly5dx9NHH0adPX44+eiixWAemTJmc0nuqqanh\nnHMuYIMNNmTAgK3Yffc9ef/9Kfzxj5ewzjr9GThwF7beejveffftFrfx0EP3sf/+B3LQQb+hb99+\nHHrokey228958MH7Gq23334HsOeee9GnT19OPPEUqqqWMnXqhy2833KKioooKSmloqIbFRXdALjv\nvnvYe+99OeSQw+jTpy+bb74Fw4efxf/931OsWLGC2bNnUVJSyk477ULPnpVsuOFG/OY3hwJQVtaZ\nWKwDnTp1oqKigoqKbqscBRIRyVeaY5KEa6+9IaeHclKRyqG5zTbbotHjzTffkkceeTCl/QGsu27j\nIdaKim6sv/4G9Y+j0ShrrLEG8+f/kNJ2i4s70atX70bb7dWrF8XFneqXdevWbZXb/eqraQwefHCj\nZVtsMYBHH208cbVhvZ06daKsrIx581Kr97PPPuHzzz/n2WefbrA0+P2YMWMGP/vZjvTsWcmQIQey\nww4D2WGHndhtt90bvR8RkUKnYJKEAw/8Nfvvf2CoJ7/27duPSCTCtGnTGDRo5ee//PJLunTpUj8S\nkkmxWOOPUSQSaXZZbW3wJR2NBgN1DTNUTU11q7fbGk23CxFqa1M73lxVVcXgwQczZMhhjQJiLBZl\n7bXXZtGi5dx99/1MmvQOb731BqNH38bo0bdz111j6ufaiIgUOgWTJBUVFWVkolW2lJevwXbb7cDj\njz/CoYceQceOHeuf+/77uYwf/wz77vurRq/56KMPGj3+8MP36d9/3frHsViMmprMTwbr2rWCeDzO\n99/PpXPn4Av5k0884/sBWGed/rz//hT22Wf/+mXvvz+l0ftMRywWo7a2ptGyjTbamGnTvqB37z5N\n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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11c9104e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_error = []\n",
    "test_error = []\n",
    "\n",
    "for alpha in alphas:\n",
    "    regr1 = Lasso(alpha=alpha)\n",
    "    regr1.fit(X_train, y_train)\n",
    "    train_error.append(regr1.score(X_train, y_train))\n",
    "    test_error.append(regr1.score(X_test, y_test))\n",
    "    \n",
    "alpha_max2_index = np.argmax(test_error)\n",
    "alpha_max2 = alphas[alpha_max2_index]\n",
    "\n",
    "#plt.subplot(2, 1, 1)\n",
    "\n",
    "plt.semilogx(alphas, train_error, label='Train')\n",
    "plt.semilogx(alphas, test_error, label='Test')\n",
    "plt.vlines(best_alpha2, plt.ylim()[0], np.max(test_error), color='k',\n",
    "           linewidth=3, label='Optimum on test')\n",
    "plt.legend(loc='lower left')\n",
    "plt.ylim([0, 1.2])\n",
    "plt.xlim([10^-9,0.01])\n",
    "plt.xlabel('Regularization parameter')\n",
    "plt.ylabel('Performance')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "e) Plot the top coefficients based on this optimal paramter. Why do you think so many are zero? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x119232cc0>"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhAAAAFoCAYAAAAGmcK4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzt3XmcHGWB//FvdfecSSYkwRxciRB8AMGI4RCyQTk9UEQF\nBFldwQsBBQHNwvJ7qazCohAQIruwgoBoEFAXRAKKXHKFQ27kQUSuhMskZEgyk5k+fn/0MVXV1UfN\nTPdMVX/erxevdFdXVz15GKjvPKeTy+UEAAAQRmKsCwAAAKKHAAEAAEIjQAAAgNAIEAAAIDQCBAAA\nCI0AAQAAQiNAAACA0AgQAAAgNAIEAAAIjQABAABCSzXy4saYYyR9TdKcwqGnJJ1hrb25kfcFAACN\n1egWiJclLZL0PknzJd0m6XpjzPYNvi8AAGggp9mbaRljVkk6xVr7s6beGAAAjJqGdmG4GWMSkg6T\n1C3pvmbdFwAAjL6GBwhjzI7KB4ZOSW9L+qS19plG3xcAADROw7swjDEpSVtJmizpEElflrRXvSEi\nl8vlHMdpYAkBAIithj1Ax2IMxB8lPWet/VqdX8n19vYpk8k2slgoSCYT6unpEnXePNR581HnzUed\nN1+hzhsWIJo2BsIlIakjzBcymazSaX7gmok6bz7qvPmo8+ajzuOj0etAnClpmaSXJE2SdKSkD0g6\noJH3BQAAjdXoFojpkq6QNEvSWkmPSzrAWntbg+8LAAAaqKEBwlr7pUZeHwAAjA32wgAAAKERIAAA\nQGgECAAAEBoBAgAAhEaAAAAAoREgAABAaAQIAAAQGgECANBQy5bdqAMO+OBYFyOUZctu1Ic/vPdY\nF0PXX/8bfepTB+oDH9hd11579VgXx2Ms9sIAAIxTZ575PS1bdqMcx1Fxs0XHcbTbbu/XOedcUPP7\nhx56kA477LM69NDDS8f23fcALVy4sGFlLlq27Eb9+Mfn6uabbx+V6431TtAbNqzX+ef/SN/4xsn6\n4Af3UXf3hDEtjx8BAgDg8f7376nTTvuupKHdmtva2od9vfb2dnV3d468YDXkcrkxf+iPptdee1WZ\nTEZ77LFAU6ZMHevilCFAAAA82traNWXKlIqfX3rpxbrppt9pzZrV6umZrL333k8nnHCyvv71r+q1\n117VhRcu1gUXnCvHcXTXXQ/oppt+pwsvXKyHHnpIknTZZZfoz3++Q4cccrguu+wS9fb26iMfOVAn\nnvgtLV36c11zzS+VzeZ06KGH6/OfP7p031/96he66abfaeXKFZo0qUcLFuyl4447QZ2dnXrkkYd1\n1llnyHEcLVy4qxzH0VFHfVlHHfVlDQ4O6uKLf6I//ekPWrfubW299Vwdc8zx2nnn+aVr33TT73Tp\npRert3etdtvt/dppp3k16+nNN9/QkiXn68EHl2twcEBz5rxTJ520SNtv/25J0m9/e52uvvoqvfHG\n69pss831+c8frQ996KOl769bt05Llpynu+++S4ODA9puux309a+fpLlzt9WyZTfqzDO/J8dxdOih\nB8lxHF1zzQ2aOXNm6H+fjUKAAIAm2tCf1qur1zftfrOmTlB35+j9r/7222/Vtdcu1Rln/JfmzHmn\nVq9epeeee1aS9IMf/Ehf+MIROvjgT+vjHz+49B3HccpaBlasWKHly+/T4sVLtGLFKzr99G9rxYoV\n2mqr2Vqy5H/1xBOP6ayzztCuu+5eeiAnEkmdeOK3NGvW5lq58hUtXny2LrroxzrppEXaaad5+sY3\nTtall16spUt/Iymnrq5uSdLixWfrxRdf0BlnnKVp0zbVXXfdrlNO+YauvPJX2nzzLfTUU0/q7LO/\nr2OO+boWLvyAli+/Vz/96cVV66Gvr0/HHfdlTZ8+Qz/84XmaOnWa/va3Z5XN5ltt7rzzdl1wwbk6\n4YRTtMsuu+mee+7SmWd+T9OnzygFl9NP/7a6urq1ePGFmjBhoq6//tc68cRjtXTpb7Tvvgdo+vQZ\n+uY3j9NPf/pzTZ8+XZtsUjnUjQUCBAA0yYb+tL793/dqw8Z00+7Z3ZHSD7+2Z6gQcc89d2n//fcq\nvXccR5/73FH63Oe+oDfeeF3Tpm2q+fN3VTKZ1PTpM7TddjtIknp6epRMJtXV1V2zyT2Xy+m0076j\nzs5OzZ49RzvvvItefvlFnXtufpzFlltupV/84gr95S8PlQKEe1zFzJkz9aUvHaNzzvkvnXTSIqVS\nKU2cOFGO43haT15//TXddNPv9Jvf/F7Tpm0qSTr88H/V/fffq9///gZ95SvH6rrrrtbuu++pI474\nV0nSFlt8Ro8//pgeeOD+iuX/wx+Wqbd3rS677BeaOHGiJGmzzTYvfX711VfpwAMP0sEHf1qS9JnP\nHKmnnnpSS5depZ13nq/HHntUzzzzV9144x+VSuX/3Rx77Am66647dMcdf9LHP36wenomS5ImT96E\nLgwAwPg3f/6uOuWUU0uDKCWVHmZ7772frrlmqQ499CDtvvue2mOPBVqwYKGSyWSoe8yaNUudnUPj\nIqZOnVp2jSlTpmrNmjWl9w8+uFxXXXWFXnrpBa1fv16ZTFqDg4PauHGjOjo6Au/z/PPPKZvN6ogj\nPu35+6TTg6Xf6F988R/aay/vjIsdd3xP1QDx3HN/07bbmlJ48HvxxRf0iU98ynNsp53m6brr8jMp\n/v73v6mvb4M+8pF9POcMDGzUihWvVLzveEKAAIAm6e7MtwaM9y6Mzs4uz2/TbtOnz9DSpb/RQw89\noAcfXK7Fi8/W0qVXasmS/w0VIoq/dRc5jhN4LJfLSsoPKFy06CR96lOH6qtfPVY9PZP12GOP6Oyz\nv690erBigNiwoU/JZFKXXXZVWTdKd3d33eX1q3S/evX1bdC0aZtqyZJLPMFGkiZNmjSiazcLAQIA\nmqi7M6VtNps81sUYkfb2du25579ozz3/RZ/85CE68shD9Pzzz2nbbY1SqZSy2cyo39Pav0rK6fjj\nTywdu/XWWzznBN37Xe8yymazWr16ld7znvcGXnv27Hfq6aef8hx78snHq5Znm23m6sYbr9fbb78d\n+MCfPXuOnnjiMX34wweWjj3++KOaM+edhXJtp9WrVymRSI6rgZFhsJAUAMBjcHBAq1ev8vyzdu1b\nkvJrLdx44/V6/vm/a+XKFbrllpvU2dmpGTNmSZJmzdpMjz76iP75zzdL3xkNm2++pdLptK699mqt\nXLlCN9/8e91ww28958yatZn6+vr08MMPau3at7RxY7+23HIr7b//h/T9739Hd955u159daWefvpJ\n/fznl+u+++6RJB1yyOFavvxeLV16lV555WX9+te/qtp9IUn77/9hTZ06VaeeerKeeOIxrVy5Qnfe\neZueeupJSdJnP/s5LVt2o/7v/67TK6+8rKuvvkp//vMd+uxnPy9J2nXX3bXjju/RaaedrAcfvF+v\nvfaqnnjiMV1yyUWy9pnSffytE+MJLRAAAI/ly+/TwQd/xHNsq61m66qrrtXEiRN11VVXaMmS85XN\nZrXNNtvo7LPPU09PjyTpi188Ruecc6YOO+xgpdODuuuuB4ZdDneXw9y52+r447+pX/7ySl1yyU80\nb97OOuaY4/X973+ndM6OO75Hn/jEp/Wd75yq3t7e0jTO0077rq644lL95Cfn65//fFOTJ2+id797\n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\nBavVw+s2HrUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11c3891d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lasso is better in feature selection, many features has no\n",
    "regre2 = Lasso(alpha=alpha_max2)\n",
    "coeff = regre2.fit(X,y).coef_\n",
    "plt.plot(coeff, label='Estimated coef')\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "f) Compute the $R^2$ with the optimal coefficient found above on 5 folds using cross_val_score and plot the\n",
    "results. Does the model work well on all random subsets?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nanbinx/anaconda/lib/python3.5/site-packages/sklearn/linear_model/coordinate_descent.py:466: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations\n",
      "  ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R^2 =  [ 0.9994817   0.99999745  0.99999772  0.9999958   0.99999245]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cross_validation import *\n",
    "from sklearn import preprocessing\n",
    "scores2 = []\n",
    "regr3 = Lasso(alpha=alpha_max2)  #best_alpha2 is from part d\n",
    "scores2 = cross_val_score(regr3, X, y, cv=5)\n",
    "print ('R^2 = ', scores2)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "f) Repeat e) but using cross validation. Use error bars on the features which are the standard deviation of the \n",
    "coefficiens obtained above. For this problem I\"ll walk you through the code. You just need to apply your optimal\n",
    "$\\alpha$ found above. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11b4ecf28>,\n",
       " <matplotlib.lines.Line2D at 0x11b4ec588>,\n",
       " <matplotlib.lines.Line2D at 0x11b4ecef0>,\n",
       " <matplotlib.lines.Line2D at 0x11b4ea588>,\n",
       " <matplotlib.lines.Line2D at 0x11b4ea860>,\n",
       " <matplotlib.lines.Line2D at 0x11b4ea780>,\n",
       " <matplotlib.lines.Line2D at 0x1193c2278>,\n",
       " <matplotlib.lines.Line2D at 0x11b4b7668>,\n",
       " <matplotlib.lines.Line2D at 0x11b4b7160>,\n",
       " <matplotlib.lines.Line2D at 0x11b4b7d68>,\n",
       " <matplotlib.lines.Line2D at 0x11b4b76a0>,\n",
       " <matplotlib.lines.Line2D at 0x1193bee10>,\n",
       " <matplotlib.lines.Line2D at 0x11b5ab5f8>,\n",
       " <matplotlib.lines.Line2D at 0x1193be7b8>,\n",
       " <matplotlib.lines.Line2D at 0x1193be668>,\n",
       " <matplotlib.lines.Line2D at 0x1193be780>,\n",
       " <matplotlib.lines.Line2D at 0x1193be2e8>,\n",
       " <matplotlib.lines.Line2D at 0x1193beb38>,\n",
       " <matplotlib.lines.Line2D at 0x1193be400>,\n",
       " <matplotlib.lines.Line2D at 0x11974b160>,\n",
       " <matplotlib.lines.Line2D at 0x11974b400>,\n",
       " <matplotlib.lines.Line2D at 0x11974b240>,\n",
       " <matplotlib.lines.Line2D at 0x11974bd30>,\n",
       " <matplotlib.lines.Line2D at 0x11974b1d0>,\n",
       " <matplotlib.lines.Line2D at 0x11974b9e8>,\n",
       " <matplotlib.lines.Line2D at 0x118cb3e80>,\n",
       " <matplotlib.lines.Line2D at 0x118cb30f0>,\n",
       " <matplotlib.lines.Line2D at 0x118cb3438>,\n",
       " <matplotlib.lines.Line2D at 0x118cb3588>,\n",
       " <matplotlib.lines.Line2D at 0x11c357160>,\n",
       " <matplotlib.lines.Line2D at 0x11974b748>,\n",
       " <matplotlib.lines.Line2D at 0x11c3571d0>,\n",
       " <matplotlib.lines.Line2D at 0x11c3572b0>,\n",
       " <matplotlib.lines.Line2D at 0x11c357550>,\n",
       " <matplotlib.lines.Line2D at 0x11c3574e0>,\n",
       " <matplotlib.lines.Line2D at 0x11c357da0>,\n",
       " <matplotlib.lines.Line2D at 0x11c357710>,\n",
       " <matplotlib.lines.Line2D at 0x11b56a780>,\n",
       " <matplotlib.lines.Line2D at 0x1193f1b70>,\n",
       " <matplotlib.lines.Line2D at 0x1193f10f0>,\n",
       " <matplotlib.lines.Line2D at 0x1193f1cc0>,\n",
       " <matplotlib.lines.Line2D at 0x1193f1240>,\n",
       " <matplotlib.lines.Line2D at 0x11b56a0f0>,\n",
       " <matplotlib.lines.Line2D at 0x1193f1828>,\n",
       " <matplotlib.lines.Line2D at 0x1152cfc50>,\n",
       " <matplotlib.lines.Line2D at 0x11c36f9b0>,\n",
       " <matplotlib.lines.Line2D at 0x11c36f0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11c36f2e8>,\n",
       " <matplotlib.lines.Line2D at 0x1193f1a58>,\n",
       " <matplotlib.lines.Line2D at 0x11c36f940>,\n",
       " <matplotlib.lines.Line2D at 0x11c36fe48>,\n",
       " <matplotlib.lines.Line2D at 0x11c36f208>,\n",
       " <matplotlib.lines.Line2D at 0x11972b240>,\n",
       " <matplotlib.lines.Line2D at 0x11b976518>,\n",
       " <matplotlib.lines.Line2D at 0x11c36f748>,\n",
       " <matplotlib.lines.Line2D at 0x11b976128>,\n",
       " <matplotlib.lines.Line2D at 0x11b976828>,\n",
       " <matplotlib.lines.Line2D at 0x11b9765c0>,\n",
       " <matplotlib.lines.Line2D at 0x11b976208>,\n",
       " <matplotlib.lines.Line2D at 0x11b9764e0>,\n",
       " <matplotlib.lines.Line2D at 0x11b976f28>,\n",
       " <matplotlib.lines.Line2D at 0x11c37b9b0>,\n",
       " <matplotlib.lines.Line2D at 0x11c37b630>,\n",
       " <matplotlib.lines.Line2D at 0x11c37b240>,\n",
       " <matplotlib.lines.Line2D at 0x11c37b898>,\n",
       " <matplotlib.lines.Line2D at 0x11c37bb38>,\n",
       " <matplotlib.lines.Line2D at 0x11c37bbe0>,\n",
       " <matplotlib.lines.Line2D at 0x11b9a4ba8>,\n",
       " <matplotlib.lines.Line2D at 0x11b9a4e80>,\n",
       " <matplotlib.lines.Line2D at 0x11b9a4e48>,\n",
       " <matplotlib.lines.Line2D at 0x11b9a49b0>,\n",
       " <matplotlib.lines.Line2D at 0x11b9a46a0>,\n",
       " <matplotlib.lines.Line2D at 0x11c37be48>,\n",
       " <matplotlib.lines.Line2D at 0x11b9a4240>,\n",
       " <matplotlib.lines.Line2D at 0x118d37160>,\n",
       " <matplotlib.lines.Line2D at 0x118d37c88>,\n",
       " <matplotlib.lines.Line2D at 0x1198c4ef0>,\n",
       " <matplotlib.lines.Line2D at 0x1198c4978>,\n",
       " <matplotlib.lines.Line2D at 0x11b9a4da0>,\n",
       " <matplotlib.lines.Line2D at 0x11b4f05c0>,\n",
       " <matplotlib.lines.Line2D at 0x11b4f08d0>,\n",
       " <matplotlib.lines.Line2D at 0x11b4f0f60>,\n",
       " <matplotlib.lines.Line2D at 0x118cb86d8>,\n",
       " <matplotlib.lines.Line2D at 0x118cb8e48>,\n",
       " <matplotlib.lines.Line2D at 0x1198c4f28>,\n",
       " <matplotlib.lines.Line2D at 0x118cb8198>,\n",
       " <matplotlib.lines.Line2D at 0x11b9cb898>,\n",
       " <matplotlib.lines.Line2D at 0x11b9cb3c8>,\n",
       " <matplotlib.lines.Line2D at 0x11b9cb438>,\n",
       " <matplotlib.lines.Line2D at 0x1193edc18>,\n",
       " <matplotlib.lines.Line2D at 0x118cb81d0>,\n",
       " <matplotlib.lines.Line2D at 0x1193eda90>,\n",
       " <matplotlib.lines.Line2D at 0x1193ed940>,\n",
       " <matplotlib.lines.Line2D at 0x1193ed518>,\n",
       " <matplotlib.lines.Line2D at 0x1193ed2e8>,\n",
       " <matplotlib.lines.Line2D at 0x1193ed0b8>,\n",
       " <matplotlib.lines.Line2D at 0x1193ed978>,\n",
       " <matplotlib.lines.Line2D at 0x118d41588>,\n",
       " <matplotlib.lines.Line2D at 0x1193ee198>,\n",
       " <matplotlib.lines.Line2D at 0x1193ee240>,\n",
       " <matplotlib.lines.Line2D at 0x1193ee4a8>,\n",
       " <matplotlib.lines.Line2D at 0x1193ee668>,\n",
       " <matplotlib.lines.Line2D at 0x1193efd30>,\n",
       " <matplotlib.lines.Line2D at 0x1193eec18>,\n",
       " <matplotlib.lines.Line2D at 0x1193ee978>,\n",
       " <matplotlib.lines.Line2D at 0x11bc03550>,\n",
       " <matplotlib.lines.Line2D at 0x11bc03390>,\n",
       " <matplotlib.lines.Line2D at 0x11bc03160>,\n",
       " <matplotlib.lines.Line2D at 0x1193eee48>,\n",
       " <matplotlib.lines.Line2D at 0x11c32de10>,\n",
       " <matplotlib.lines.Line2D at 0x11c32dda0>,\n",
       " <matplotlib.lines.Line2D at 0x11c32da90>,\n",
       " <matplotlib.lines.Line2D at 0x11c32d780>,\n",
       " <matplotlib.lines.Line2D at 0x11c32d5c0>,\n",
       " <matplotlib.lines.Line2D at 0x11c32d908>,\n",
       " <matplotlib.lines.Line2D at 0x11c09e470>,\n",
       " <matplotlib.lines.Line2D at 0x11c09e588>,\n",
       " <matplotlib.lines.Line2D at 0x11c09e978>,\n",
       " <matplotlib.lines.Line2D at 0x11c09e3c8>,\n",
       " <matplotlib.lines.Line2D at 0x11c09ecc0>,\n",
       " <matplotlib.lines.Line2D at 0x11c32d6d8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc81198>,\n",
       " <matplotlib.lines.Line2D at 0x11cc813c8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc815f8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc81828>,\n",
       " <matplotlib.lines.Line2D at 0x11cc81a58>,\n",
       " <matplotlib.lines.Line2D at 0x11b4b4390>,\n",
       " <matplotlib.lines.Line2D at 0x11cc81eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc84128>,\n",
       " <matplotlib.lines.Line2D at 0x11cc84358>,\n",
       " <matplotlib.lines.Line2D at 0x11cc84588>,\n",
       " <matplotlib.lines.Line2D at 0x11cc847b8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc81c88>,\n",
       " <matplotlib.lines.Line2D at 0x11cc84c18>,\n",
       " <matplotlib.lines.Line2D at 0x11cc84e48>,\n",
       " <matplotlib.lines.Line2D at 0x11cc870b8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc872e8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc87518>,\n",
       " <matplotlib.lines.Line2D at 0x11cc849e8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc87978>,\n",
       " <matplotlib.lines.Line2D at 0x11cc87ba8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc87dd8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc87fd0>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8b278>,\n",
       " <matplotlib.lines.Line2D at 0x11cc87748>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8b6d8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8b908>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8bb38>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8bd68>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8bf98>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8b4a8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8e438>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8e668>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8e898>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8eac8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8ecf8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8e208>,\n",
       " <matplotlib.lines.Line2D at 0x11cc91198>,\n",
       " <matplotlib.lines.Line2D at 0x11cc913c8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc915f8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc91828>,\n",
       " <matplotlib.lines.Line2D at 0x11cc91a58>,\n",
       " <matplotlib.lines.Line2D at 0x11cc8ef28>,\n",
       " <matplotlib.lines.Line2D at 0x11cc91eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc94128>,\n",
       " <matplotlib.lines.Line2D at 0x11cc94358>,\n",
       " <matplotlib.lines.Line2D at 0x11cc94588>,\n",
       " <matplotlib.lines.Line2D at 0x11cc947b8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc91c88>,\n",
       " <matplotlib.lines.Line2D at 0x118d69a58>,\n",
       " <matplotlib.lines.Line2D at 0x11c379a58>,\n",
       " <matplotlib.lines.Line2D at 0x11b94bdd8>,\n",
       " <matplotlib.lines.Line2D at 0x11b5ab240>,\n",
       " <matplotlib.lines.Line2D at 0x11b5ab5c0>,\n",
       " <matplotlib.lines.Line2D at 0x11bc2eda0>,\n",
       " <matplotlib.lines.Line2D at 0x10cf698d0>,\n",
       " <matplotlib.lines.Line2D at 0x11cc94b38>,\n",
       " <matplotlib.lines.Line2D at 0x11cc94d30>,\n",
       " <matplotlib.lines.Line2D at 0x11cc94f28>,\n",
       " <matplotlib.lines.Line2D at 0x11cc97160>,\n",
       " <matplotlib.lines.Line2D at 0x11b598d68>,\n",
       " <matplotlib.lines.Line2D at 0x11cc97550>,\n",
       " <matplotlib.lines.Line2D at 0x11cc97748>,\n",
       " <matplotlib.lines.Line2D at 0x11cc97940>,\n",
       " <matplotlib.lines.Line2D at 0x11cc97b38>,\n",
       " <matplotlib.lines.Line2D at 0x11cc97d30>,\n",
       " <matplotlib.lines.Line2D at 0x11cc97358>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9a160>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9a358>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9a588>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9a7b8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9a9e8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc97f28>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9ae48>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9d0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9d2e8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9d518>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9d748>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9ac18>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9dba8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9ddd8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9dfd0>,\n",
       " <matplotlib.lines.Line2D at 0x11cca0278>,\n",
       " <matplotlib.lines.Line2D at 0x11cca04a8>,\n",
       " <matplotlib.lines.Line2D at 0x11cc9d978>,\n",
       " <matplotlib.lines.Line2D at 0x11cca0908>,\n",
       " <matplotlib.lines.Line2D at 0x11cca0b38>,\n",
       " <matplotlib.lines.Line2D at 0x11cca0d68>,\n",
       " <matplotlib.lines.Line2D at 0x11cca0f98>,\n",
       " <matplotlib.lines.Line2D at 0x11cca3208>,\n",
       " <matplotlib.lines.Line2D at 0x11cca06d8>,\n",
       " <matplotlib.lines.Line2D at 0x11cca3668>,\n",
       " <matplotlib.lines.Line2D at 0x11cca3898>,\n",
       " <matplotlib.lines.Line2D at 0x11cca3ac8>,\n",
       " <matplotlib.lines.Line2D at 0x11cca3cf8>,\n",
       " <matplotlib.lines.Line2D at 0x11cca3f28>,\n",
       " <matplotlib.lines.Line2D at 0x11cca3438>,\n",
       " <matplotlib.lines.Line2D at 0x11cca63c8>,\n",
       " <matplotlib.lines.Line2D at 0x11cca65f8>,\n",
       " <matplotlib.lines.Line2D at 0x11cca6828>,\n",
       " <matplotlib.lines.Line2D at 0x11cca6a58>,\n",
       " <matplotlib.lines.Line2D at 0x11cca6c88>,\n",
       " <matplotlib.lines.Line2D at 0x11cca6198>,\n",
       " <matplotlib.lines.Line2D at 0x11ccaa128>,\n",
       " <matplotlib.lines.Line2D at 0x11ccaa358>,\n",
       " <matplotlib.lines.Line2D at 0x11ccaa588>,\n",
       " <matplotlib.lines.Line2D at 0x11ccaa7b8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccaa9e8>,\n",
       " <matplotlib.lines.Line2D at 0x11cca6eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccaae48>,\n",
       " <matplotlib.lines.Line2D at 0x11ccad0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccad2e8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccad518>,\n",
       " <matplotlib.lines.Line2D at 0x11ccad748>,\n",
       " <matplotlib.lines.Line2D at 0x11ccaac18>,\n",
       " <matplotlib.lines.Line2D at 0x11ccadba8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccaddd8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccadfd0>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb0278>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb04a8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccad978>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb0908>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb0b38>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb0d68>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb0f98>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb3208>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb06d8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb3668>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb3898>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb3ac8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb3cf8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb3f28>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb3438>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb73c8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb75f8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb7828>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb7a58>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb7c88>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb7198>,\n",
       " <matplotlib.lines.Line2D at 0x11ccba128>,\n",
       " <matplotlib.lines.Line2D at 0x11ccba358>,\n",
       " <matplotlib.lines.Line2D at 0x11ccba588>,\n",
       " <matplotlib.lines.Line2D at 0x11ccba7b8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccba9e8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccb7eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbae48>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbd0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbd2e8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbd518>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbd748>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbac18>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbdba8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbddd8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbdfd0>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc0278>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc04a8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccbd978>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc0908>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc0b38>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc0d68>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc0f98>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc4208>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc06d8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc4668>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc4898>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc4ac8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc4cf8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc4f28>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc4438>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc73c8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc75f8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc7828>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc7a58>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc7c88>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc7198>,\n",
       " <matplotlib.lines.Line2D at 0x11ccca128>,\n",
       " <matplotlib.lines.Line2D at 0x11ccca358>,\n",
       " <matplotlib.lines.Line2D at 0x11ccca588>,\n",
       " <matplotlib.lines.Line2D at 0x11ccca7b8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccca9e8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccc7eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11cccae48>,\n",
       " <matplotlib.lines.Line2D at 0x11cccd0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11cccd2e8>,\n",
       " <matplotlib.lines.Line2D at 0x11cccd518>,\n",
       " <matplotlib.lines.Line2D at 0x11cccd748>,\n",
       " <matplotlib.lines.Line2D at 0x11cccac18>,\n",
       " <matplotlib.lines.Line2D at 0x11cccdba8>,\n",
       " <matplotlib.lines.Line2D at 0x11cccddd8>,\n",
       " <matplotlib.lines.Line2D at 0x11cccdfd0>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd0278>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd04a8>,\n",
       " <matplotlib.lines.Line2D at 0x11cccd978>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd0908>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd0b38>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd0d68>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd0f98>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd4208>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd06d8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd4668>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd4898>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd4ac8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd4cf8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd4f28>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd4438>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd73c8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd75f8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd7828>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd7a58>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd7c88>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd7198>,\n",
       " <matplotlib.lines.Line2D at 0x11ccda128>,\n",
       " <matplotlib.lines.Line2D at 0x11ccda358>,\n",
       " <matplotlib.lines.Line2D at 0x11ccda588>,\n",
       " <matplotlib.lines.Line2D at 0x11ccda7b8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccda9e8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccd7eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11ccdae48>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ed0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ed2e8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ed518>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ed748>,\n",
       " <matplotlib.lines.Line2D at 0x11ccdac18>,\n",
       " <matplotlib.lines.Line2D at 0x11d8edba8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8eddd8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8edfd0>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ef278>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ef4a8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ed978>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ef908>,\n",
       " <matplotlib.lines.Line2D at 0x11d8efb38>,\n",
       " <matplotlib.lines.Line2D at 0x11d8efd68>,\n",
       " <matplotlib.lines.Line2D at 0x11d8eff98>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f3208>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ef6d8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f3668>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f3898>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f3ac8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f3cf8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f3f28>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f3438>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f53c8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f55f8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f5828>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f5a58>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f5c88>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f5198>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fa128>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fa358>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fa588>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fa7b8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fa9e8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8f5eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fae48>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fd0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fd2e8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fd518>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fd748>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fac18>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fdba8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fddd8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fdfd0>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ff278>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ff4a8>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fd978>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ff908>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ffb38>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ffd68>,\n",
       " <matplotlib.lines.Line2D at 0x11d8fff98>,\n",
       " <matplotlib.lines.Line2D at 0x11d903208>,\n",
       " <matplotlib.lines.Line2D at 0x11d8ff6d8>,\n",
       " <matplotlib.lines.Line2D at 0x11d903668>,\n",
       " <matplotlib.lines.Line2D at 0x11d903898>,\n",
       " <matplotlib.lines.Line2D at 0x11d903ac8>,\n",
       " <matplotlib.lines.Line2D at 0x11d903cf8>,\n",
       " <matplotlib.lines.Line2D at 0x11d903f28>,\n",
       " <matplotlib.lines.Line2D at 0x11d903438>,\n",
       " <matplotlib.lines.Line2D at 0x11d9063c8>,\n",
       " <matplotlib.lines.Line2D at 0x11d9065f8>,\n",
       " <matplotlib.lines.Line2D at 0x11d906828>,\n",
       " <matplotlib.lines.Line2D at 0x11d906a58>,\n",
       " <matplotlib.lines.Line2D at 0x11d906c88>,\n",
       " <matplotlib.lines.Line2D at 0x11d906198>,\n",
       " <matplotlib.lines.Line2D at 0x11d90a128>,\n",
       " <matplotlib.lines.Line2D at 0x11d90a358>,\n",
       " <matplotlib.lines.Line2D at 0x11d90a588>,\n",
       " <matplotlib.lines.Line2D at 0x11d90a7b8>,\n",
       " <matplotlib.lines.Line2D at 0x11d90a9e8>,\n",
       " <matplotlib.lines.Line2D at 0x11d906eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11d90ae48>,\n",
       " <matplotlib.lines.Line2D at 0x11d90c0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11d90c2e8>,\n",
       " <matplotlib.lines.Line2D at 0x11d90c518>,\n",
       " <matplotlib.lines.Line2D at 0x11d90c748>,\n",
       " <matplotlib.lines.Line2D at 0x11d90ac18>,\n",
       " <matplotlib.lines.Line2D at 0x11d90cba8>,\n",
       " <matplotlib.lines.Line2D at 0x11d90cdd8>,\n",
       " <matplotlib.lines.Line2D at 0x11d90cfd0>,\n",
       " <matplotlib.lines.Line2D at 0x11d90f278>,\n",
       " <matplotlib.lines.Line2D at 0x11d90f4a8>,\n",
       " <matplotlib.lines.Line2D at 0x11d90c978>,\n",
       " <matplotlib.lines.Line2D at 0x11d90f908>,\n",
       " <matplotlib.lines.Line2D at 0x11d90fb38>,\n",
       " <matplotlib.lines.Line2D at 0x11d90fd68>,\n",
       " <matplotlib.lines.Line2D at 0x11d90ff98>,\n",
       " <matplotlib.lines.Line2D at 0x11d914208>,\n",
       " <matplotlib.lines.Line2D at 0x11d90f6d8>,\n",
       " <matplotlib.lines.Line2D at 0x11d914668>,\n",
       " <matplotlib.lines.Line2D at 0x11d914898>,\n",
       " <matplotlib.lines.Line2D at 0x11d914ac8>,\n",
       " <matplotlib.lines.Line2D at 0x11d914cf8>,\n",
       " <matplotlib.lines.Line2D at 0x11d914f28>,\n",
       " <matplotlib.lines.Line2D at 0x11d914438>,\n",
       " <matplotlib.lines.Line2D at 0x11d9173c8>,\n",
       " <matplotlib.lines.Line2D at 0x11d9175f8>,\n",
       " <matplotlib.lines.Line2D at 0x11d917828>,\n",
       " <matplotlib.lines.Line2D at 0x11d917a58>,\n",
       " <matplotlib.lines.Line2D at 0x11d917c88>,\n",
       " <matplotlib.lines.Line2D at 0x11d917198>,\n",
       " <matplotlib.lines.Line2D at 0x11d91b128>,\n",
       " <matplotlib.lines.Line2D at 0x11d91b358>,\n",
       " <matplotlib.lines.Line2D at 0x11d91b588>,\n",
       " <matplotlib.lines.Line2D at 0x11d91b7b8>,\n",
       " <matplotlib.lines.Line2D at 0x11d91b9e8>,\n",
       " <matplotlib.lines.Line2D at 0x11d917eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11d91be48>,\n",
       " <matplotlib.lines.Line2D at 0x11d91d0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11d91d2e8>,\n",
       " <matplotlib.lines.Line2D at 0x11d91d518>,\n",
       " <matplotlib.lines.Line2D at 0x11d91d748>,\n",
       " <matplotlib.lines.Line2D at 0x11d91bc18>,\n",
       " <matplotlib.lines.Line2D at 0x11d91dba8>,\n",
       " <matplotlib.lines.Line2D at 0x11d91ddd8>,\n",
       " <matplotlib.lines.Line2D at 0x11d91dfd0>,\n",
       " <matplotlib.lines.Line2D at 0x11d921278>,\n",
       " <matplotlib.lines.Line2D at 0x11d9214a8>,\n",
       " <matplotlib.lines.Line2D at 0x11d91d978>,\n",
       " <matplotlib.lines.Line2D at 0x11d921908>,\n",
       " <matplotlib.lines.Line2D at 0x11d921b38>,\n",
       " <matplotlib.lines.Line2D at 0x11d921d68>,\n",
       " <matplotlib.lines.Line2D at 0x11d921f98>,\n",
       " <matplotlib.lines.Line2D at 0x11d924208>,\n",
       " <matplotlib.lines.Line2D at 0x11d9216d8>,\n",
       " <matplotlib.lines.Line2D at 0x11d924668>,\n",
       " <matplotlib.lines.Line2D at 0x11d924898>,\n",
       " <matplotlib.lines.Line2D at 0x11d924ac8>,\n",
       " <matplotlib.lines.Line2D at 0x11d924cf8>,\n",
       " <matplotlib.lines.Line2D at 0x11d924f28>,\n",
       " <matplotlib.lines.Line2D at 0x11d924438>,\n",
       " <matplotlib.lines.Line2D at 0x11d9273c8>,\n",
       " <matplotlib.lines.Line2D at 0x11d9275f8>,\n",
       " <matplotlib.lines.Line2D at 0x11d927828>,\n",
       " <matplotlib.lines.Line2D at 0x11d927a58>,\n",
       " <matplotlib.lines.Line2D at 0x11d927c88>,\n",
       " <matplotlib.lines.Line2D at 0x11d927198>,\n",
       " <matplotlib.lines.Line2D at 0x11d92b128>,\n",
       " <matplotlib.lines.Line2D at 0x11d92b358>,\n",
       " <matplotlib.lines.Line2D at 0x11d92b588>,\n",
       " <matplotlib.lines.Line2D at 0x11d92b7b8>,\n",
       " <matplotlib.lines.Line2D at 0x11d92b9e8>,\n",
       " <matplotlib.lines.Line2D at 0x11d927eb8>,\n",
       " <matplotlib.lines.Line2D at 0x11d92be48>,\n",
       " <matplotlib.lines.Line2D at 0x11d92e0b8>,\n",
       " <matplotlib.lines.Line2D at 0x11d92e2e8>,\n",
       " <matplotlib.lines.Line2D at 0x11d92e518>,\n",
       " <matplotlib.lines.Line2D at 0x11d92e748>,\n",
       " <matplotlib.lines.Line2D at 0x11d92bc18>,\n",
       " <matplotlib.lines.Line2D at 0x11d92eba8>,\n",
       " <matplotlib.lines.Line2D at 0x11d92edd8>,\n",
       " <matplotlib.lines.Line2D at 0x11d92efd0>,\n",
       " <matplotlib.lines.Line2D at 0x11d931278>,\n",
       " <matplotlib.lines.Line2D at 0x11d9314a8>,\n",
       " <matplotlib.lines.Line2D at 0x11d92e978>,\n",
       " <matplotlib.lines.Line2D at 0x11d931908>,\n",
       " <matplotlib.lines.Line2D at 0x11d931b38>,\n",
       " <matplotlib.lines.Line2D at 0x11d931d68>,\n",
       " <matplotlib.lines.Line2D at 0x11d931f98>,\n",
       " <matplotlib.lines.Line2D at 0x11d934208>,\n",
       " <matplotlib.lines.Line2D at 0x11d9316d8>,\n",
       " <matplotlib.lines.Line2D at 0x11d934668>]"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAz4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11c4b3c18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.cross_validation import KFold\n",
    "from sklearn import preprocessing\n",
    "def run_cv_coeffs(X,y,clf_class,**kwargs):\n",
    "    # Construct a kfolds object\n",
    "    kf = KFold(len(y),n_folds=5,shuffle=True)\n",
    "    y_pred = y.copy()\n",
    "    coeffs=[]\n",
    "    # Iterate through folds\n",
    "    for train_index, test_index in kf:\n",
    "        \n",
    "        X_train, X_test = X[train_index], X[test_index]\n",
    "        y_train = y[train_index]\n",
    "        # Initialize a classifier with key word arguments\n",
    "        clf = clf_class(**kwargs)\n",
    "        clf.fit(X_train,y_train)\n",
    "        y_pred[test_index] = clf.predict(X_test)\n",
    "        coeffs.append(clf.coef_)\n",
    "    return coeffs\n",
    "\n",
    "\n",
    "\n",
    "scaler = preprocessing.StandardScaler()\n",
    "X_scaled = X.as_matrix().astype(np.float)\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "coeffs=run_cv_coeffs(X_scaled,np.array(y),Lasso,alpha=alpha_best)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def get_coeffs(coeffs):\n",
    "    coeffs_avgd = [(coeffs[0][i] + coeffs[1][i] + coeffs[2][i] + coeffs[3][i] + coeffs[4][i])/5 for i in range(0,len(X.columns))]\n",
    "    coeffs_std = [np.std([coeffs[0][i],coeffs[1][i],coeffs[2][i],coeffs[3][i],coeffs[4][i]]) for i in range(0,len(X.columns))]\n",
    "    return coeffs_avgd, coeffs_std\n",
    "coeffs_avg,coeffs_std=get_coeffs(coeffs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 479,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.figure.Figure at 0x16ef6d090>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfCoeffs = pd.DataFrame({'type':X.columns.values, 'coef':coeffs_avg, 'std':coeffs_std})\n",
    "dfCoeffs = dfCoeffs[(dfCoeffs['coef']>1) |(dfCoeffs['coef']<-1) ]\n",
    "plt.figure(figsize=(15,15))\n",
    "dfCoeffs_sorted = dfCoeffs.sort(['coef'])[::-1]\n",
    "yerr_vals = dfCoeffs_sorted['std'].values\n",
    "dfCoeffs_sorted.plot(x='type',y='coef',kind='bar',yerr=yerr_vals,figsize=(15,15))"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
